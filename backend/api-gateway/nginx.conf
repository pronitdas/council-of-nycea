events {
    worker_connections 1024;
}

http {
    upstream agent_intelligence {
        server agent-intelligence:3001;
    }

    upstream orchestration_pipeline {
        server orchestration-pipeline:3002;
    }

    upstream capability_registry {
        server capability-registry:3003;
    }

    upstream discussion_orchestration {
        server discussion-orchestration:3005;
    }

    # upstream security_gateway {
    #     server security-gateway:3004;
    # }

    # Add CORS headers for all responses
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Client-Version,X-Environment' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

    server {
        listen 80;
        
        # Handle preflight OPTIONS requests
        location / {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-Client-Version,X-Environment';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Agent Intelligence Service
        location /api/v1/agents {
            proxy_pass http://agent_intelligence/api/v1/agents;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Orchestration Pipeline Service
        location /api/v1/operations {
            proxy_pass http://orchestration_pipeline/api/v1/operations;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Capability Registry Service
        location /api/v1/capabilities {
            proxy_pass http://capability_registry/api/v1/capabilities;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Persona routes (Agent Intelligence Service)
        location /api/v1/personas {
            proxy_pass http://agent_intelligence/api/v1/personas;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Discussion routes (Discussion Orchestration Service)
        location /api/v1/discussions {
            proxy_pass http://discussion_orchestration/api/v1/discussions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Security Gateway Service (when implemented)
        # location /api/v1/auth {
        #     proxy_pass http://security_gateway/api/v1/auth;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Fallback for other API routes - try each service
        location ~* ^/api/(.*)$ {
            # Try agent intelligence first
            error_page 404 = @try_orchestration;
            proxy_pass http://agent_intelligence/api/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @try_orchestration {
            error_page 404 = @try_capability;
            proxy_pass http://orchestration_pipeline/api/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @try_capability {
            error_page 404 = @try_discussion;
            proxy_pass http://capability_registry/api/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location @try_discussion {
            proxy_pass http://discussion_orchestration/api/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Default route
        # location / {
        #     return 404 "Not Found";
        # }
    }
} 